<data enableBatchRequests="true" name="SampleManagerDS" transports="http https local">
   <config enableOData="false" id="SampleManagerDB">
      <property name="driverClassName">org.postgresql.Driver</property>
      <property name="url">jdbc:postgresql://172.17.61.5:5433/sample_manager</property>
      <property name="username">postgres</property>
      <property name="password">siu*2016</property>
   </config>
   <query id="GetRequests" useConfig="SampleManagerDB">
      <sql>;with vars(pageSize)as(values(least(200,:pageSize)))SELECT r.id, r.ticket_number, r.request_type_id, r.user_id ,r.experiment_name ,r.service_id, r.vendor_id ,(select count(1) from sm.entity_request where request_id = r.id) as entities , r.comments, to_char(r.created_on,'YYYY-MM-DD HH:MI:SS') as created_on ,r.request_status_id, r.crop_id , u.name as first_name, last_name FROM sm.request r inner join master.user u on r.user_id = u.id where :requestStatusId in (0, request_status_id) and :cropId in (0, crop_id) and :serviceId in (0, service_id) and :requestTypeId in(0, r.request_type_id) and :vendorId in (0, r.vendor_id) limit (select pageSize from vars) offset (select pageSize from vars) * :page</sql>
      <result outputType="json">{ "entities":{ "requests":[ { "id":$id,"ticketNumber":"$ticket_number", "requestTypeId":$request_type_id, "userId":$user_id, "experimentName":"$experiment_name", "serviceId":$service_id, "vendorId":$vendor_id, "totalEntities":$entities, "comments":"$comments", "createdOn":"$created_on", "firstName":"$first_name", "lastName":"$last_name", "cropId":$crop_id, "requestStatusId":$request_status_id } ] } }</result>
      <param name="requestStatusId" optional="false" sqlType="INTEGER"/>
      <param name="cropId" optional="false" sqlType="INTEGER"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="serviceId" optional="false" sqlType="INTEGER"/>
      <param name="requestTypeId" optional="false" sqlType="INTEGER"/>
      <param name="vendorId" optional="false" sqlType="INTEGER"/>
      <param name="pageSize" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="GetRequestsCount" useConfig="SampleManagerDB">
      <sql>SELECT count(1)as total FROM sm.request r where :requestStatusId in (0, request_status_id) and :cropId in (0, crop_id) and :serviceId in (0, service_id) and :requestTypeId in(0, r.request_type_id) and :vendorId in (0, r.vendor_id)</sql>
      <result outputType="json">{"entities": {"total":$total}}</result>
      <param name="requestStatusId" optional="false" sqlType="INTEGER"/>
      <param name="cropId" optional="false" sqlType="INTEGER"/>
      <param name="serviceId" optional="false" sqlType="INTEGER"/>
      <param name="requestTypeId" optional="false" sqlType="INTEGER"/>
      <param name="vendorId" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="GetEntitiesByRequestId" useConfig="SampleManagerDB">
      <sql>select id,name,entity_type_id,germplasm_id from sm.entity e inner join sm.entity_request er on er.entity_id = e.id and er.request_id = :requestId</sql>
      <result outputType="json">{ "entities": { "requestEntities": [{ "id": "$id","name":"$name","germplasmId":"$germplasm_id","typeId":"$entity_type_id" } ] }}</result>
      <param name="requestId" sqlType="INTEGER"/>
   </query>
   <query id="UpdateRequestStatus" useConfig="SampleManagerDB">
      <sql>update sm.request set request_status_id = :statusId where id = :requestId</sql>
      <param name="statusId" sqlType="INTEGER"/>
      <param name="requestId" sqlType="INTEGER"/>
   </query>
   <query id="GetServices" useConfig="SampleManagerDB">
      <sql>select id,code,description,service_type_id from sm.service</sql>
      <result outputType="json">{&#xd; "entities": {&#xd; "services": [ { "id": $id, "code": "$code","description":$description, "serviceTypeId":$service_type_id } ] }}</result>
   </query>
   <query id="GetSubservices" useConfig="SampleManagerDB">
      <sql>select id,name from sm.subservice</sql>
      <result outputType="json">{&#xd; "entities": {&#xd; "subservices": [&#xd; {&#xd; "id": "$id", "name": "$name"&#xd; }&#xd; ]&#xd; }&#xd;}</result>
   </query>
   <query id="GetCrops" useConfig="SampleManagerDB">
      <sql>select id,name from master.crop</sql>
      <result outputType="json">{&#xd; "entries": {&#xd; "crop": [&#xd; {&#xd; "id": "$id",&#xd; "name": "$name"&#xd; }&#xd; ]&#xd; }&#xd;}</result>
   </query>
   <query id="GetEntityTypes" useConfig="SampleManagerDB">
      <sql>select id,name from sm.entity_type</sql>
      <result outputType="json">{&#xd; "entities": {"entityTypeEntities": [&#xd; {&#xd; "id": "$id",&#xd; "name": "$name"&#xd; }]}}</result>
   </query>
   <query id="GetBatches" useConfig="SampleManagerDB">
      <sql>select distinct b.id,b.description, to_char(b.creation_timestamp,'YYYY-MM-DD HH:MI:SS') as creation_date from sm.sample_batch b inner join sm.request r on b.id = r.sample_batch_id where :serviceId in(0,r.service_id) and :subserviceId in(0,r.subservice_id) and :cropId in(0,r.crop_id) limit 30 offset 30 * :page</sql>
      <result element="response" rowName="batches">
         <element column="creation_date" name="creation_date" xsdType="string"/>
         <element column="description" name="description" xsdType="string"/>
         <element column="id" name="id" xsdType="integer"/>
         <call-query href="GetRequestsByBatchId" requiredRoles="">
            <with-param column="id" name="sampleBatchId"/>
         </call-query>
      </result>
      <param name="serviceId" sqlType="INTEGER"/>
      <param name="subserviceId" sqlType="INTEGER"/>
      <param name="cropId" sqlType="INTEGER"/>
      <param name="page" sqlType="INTEGER"/>
   </query>
   <query id="GetBatchesCount" useConfig="SampleManagerDB">
      <sql>select count(distinct b.id) as total from sm.sample_batch b inner join sm.request r on b.id = r.sample_batch_id where :serviceId in(0,r.service_id) and :subserviceId in(0,r.subservice_id) and :cropId in(0,r.crop_id)</sql>
      <result outputType="json">{"entities": {"total":$total}}</result>
      <param name="serviceId" sqlType="INTEGER"/>
      <param name="subserviceId" sqlType="INTEGER"/>
      <param name="cropId" sqlType="INTEGER"/>
   </query>
   <query id="GetRequestsByBatchId" useConfig="SampleManagerDB">
      <sql>select id, ticket_number, crop_id, service_id, subservice_id, request_status_id, comments from sm.request where sample_batch_id = :sampleBatchId</sql>
      <result outputType="json">{"entities":{"requests":[{&#xd;"id":"$id","comments":"$comments","cropId":"$crop_id","serviceId":"$service_id","subserviceId":"$subservice_id","statusId":"$request_status_id","ticketNumber":"$ticket_number"&#xd;}]}}</result>
      <param name="sampleBatchId" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="AddService" useConfig="SampleManagerDB">
      <sql>INSERT INTO sm.service(description, created_on, created_by, service_type_id, code)VALUES (:description, now(), :createdBy, :serviceTypeId, :code);</sql>
      <param name="description" sqlType="STRING"/>
      <param name="createdBy" sqlType="INTEGER"/>
      <param name="serviceTypeId" sqlType="INTEGER"/>
      <param name="code" sqlType="STRING"/>
   </query>
   <query id="UpdateService" useConfig="SampleManagerDB">
      <sql>UPDATE sm.service SET description=:description, updated_on=now(), updated_by=:updatedBy, service_type_id=:serviceTypeId, code=:code WHERE id=:id</sql>
      <param name="description" sqlType="STRING"/>
      <param name="updatedBy" optional="false" sqlType="INTEGER"/>
      <param name="serviceTypeId" optional="false" sqlType="INTEGER"/>
      <param name="code" sqlType="STRING"/>
      <param name="id" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="RemoveService" useConfig="SampleManagerDB">
      <sql>delete from sm.service where id=:id</sql>
      <param name="id" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="AddServiceType" useConfig="SampleManagerDB">
      <sql>INSERT INTO sm.service_type(created_on, created_by, description)VALUES (now(), :createdBy, :description);</sql>
      <param name="createdBy" optional="false" sqlType="INTEGER"/>
      <param name="description" sqlType="STRING"/>
   </query>
   <query id="GetServiceTypes" useConfig="SampleManagerDB">
      <sql>select id, description from sm.service_type;</sql>
      <result outputType="json">{"entities":{"serviceTypes":[{"id":$id, "description":"$description" }]}}</result>
   </query>
   <query id="UpdateServiceType" useConfig="SampleManagerDB">
      <sql>UPDATE sm.service_type SET updated_on=now(), updated_by=:updatedBy, description=:description WHERE id = :id</sql>
      <param name="updatedBy" optional="false" sqlType="INTEGER"/>
      <param name="description" sqlType="STRING"/>
      <param name="id" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="DeleteServiceType" useConfig="SampleManagerDB">
      <sql>DELETE FROM sm.service_type where id=:id</sql>
      <param name="id" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="GetVendors" useConfig="SampleManagerDB">
      <sql>select id, assay_id, service_type_id, name from sm.vendor</sql>
      <result outputType="json">{"entities":{"vendors":[{"id":$id,"assayId":$assay_id,"serviceTypeId":$service_type_id,"name":"$name"}]}}</result>
   </query>
   <query id="AddVendor" useConfig="SampleManagerDB">
      <sql>INSERT INTO sm.vendor(name, created_on, created_by, assay_id, service_type_id)VALUES (:name, now(), :createdBy, :assayId, :serviceTypeId)</sql>
      <param name="name" sqlType="STRING"/>
      <param name="createdBy" optional="false" sqlType="INTEGER"/>
      <param name="assayId" optional="false" sqlType="INTEGER"/>
      <param name="serviceTypeId" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="UpdateVendor" useConfig="SampleManagerDB">
      <sql>UPDATE sm.vendor SET name=:name, updated_on=now(),updated_by=:updatedBy, assay_id=:assayId, service_type_id=:serviceTypeId WHERE id=:id</sql>
      <param name="name" sqlType="STRING"/>
      <param name="updatedBy" optional="false" sqlType="INTEGER"/>
      <param name="assayId" optional="false" sqlType="INTEGER"/>
      <param name="serviceTypeId" optional="false" sqlType="INTEGER"/>
      <param name="id" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="DeleteVendor" useConfig="SampleManagerDB">
      <sql>delete from sm.vendor where id=:id</sql>
      <param name="id" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="GetRequestTypes" useConfig="SampleManagerDB">
      <sql>SELECT id, description FROM sm.request_type</sql>
      <result outputType="json">{"entities":{"requestTypes":[{"id":$id,"description":"$description"}]}}</result>
   </query>
   <query id="AddRequestType" useConfig="SampleManagerDB">
      <sql>INSERT INTO sm.request_type (description,created_on,created_by) VALUES (:description,now(),:createdBy)</sql>
      <param name="description" sqlType="STRING"/>
      <param name="createdBy" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="UpdateRequestType" useConfig="SampleManagerDB">
      <sql>UPDATE sm.request_type SET description = :description, updated_on=now(), updated_by=:updatedBy where id = :id</sql>
      <param name="description" sqlType="STRING"/>
      <param name="updatedBy" optional="false" sqlType="INTEGER"/>
      <param name="id" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="DeleteRequestType" useConfig="SampleManagerDB">
      <sql>DELETE FROM sm.request_type WHERE id=:id</sql>
      <param name="id" optional="false" sqlType="INTEGER"/>
   </query>
   <resource method="GET" path="/requests">
      <call-query href="GetRequests">
         <with-param name="requestStatusId" query-param="requestStatusId"/>
         <with-param name="cropId" query-param="cropId"/>
         <with-param name="page" query-param="page"/>
         <with-param name="serviceId" query-param="serviceId"/>
         <with-param name="vendorId" query-param="vendorId"/>
         <with-param name="requestTypeId" query-param="requestTypeId"/>
         <with-param name="pageSize" query-param="pageSize"/>
      </call-query>
   </resource>
   <resource method="GET" path="/requests/count">
      <call-query href="GetRequestsCount">
         <with-param name="requestStatusId" query-param="requestStatusId"/>
         <with-param name="cropId" query-param="cropId"/>
         <with-param name="serviceId" query-param="serviceId"/>
         <with-param name="vendorId" query-param="vendorId"/>
         <with-param name="requestTypeId" query-param="requestTypeId"/>
      </call-query>
   </resource>
   <resource method="GET" path="/requests/{requestId}/entities">
      <call-query href="GetEntitiesByRequestId">
         <with-param name="requestId" query-param="requestId"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/requests" returnRequestStatus="true">
      <call-query href="UpdateRequestStatus">
         <with-param name="statusId" query-param="statusId"/>
         <with-param name="requestId" query-param="requestId"/>
      </call-query>
   </resource>
   <resource method="GET" path="/services">
      <call-query href="GetServices"/>
   </resource>
   <resource method="GET" path="/subservices">
      <call-query href="GetSubservices"/>
   </resource>
   <resource method="GET" path="/crops">
      <call-query href="GetCrops"/>
   </resource>
   <resource method="GET" path="/entityTypes">
      <call-query href="GetEntityTypes"/>
   </resource>
   <resource method="GET" path="/sample-batches">
      <call-query href="GetBatches">
         <with-param name="serviceId" query-param="serviceId"/>
         <with-param name="subserviceId" query-param="subserviceId"/>
         <with-param name="cropId" query-param="cropId"/>
         <with-param name="page" query-param="page"/>
      </call-query>
   </resource>
   <resource method="GET" path="/sample-batches/count">
      <call-query href="GetBatchesCount">
         <with-param name="cropId" query-param="cropId"/>
         <with-param name="serviceId" query-param="serviceId"/>
         <with-param name="subserviceId" query-param="subserviceId"/>
      </call-query>
   </resource>
   <resource method="POST" path="/services">
      <call-query href="AddService">
         <with-param name="description" query-param="description"/>
         <with-param name="createdBy" query-param="createdBy"/>
         <with-param name="serviceTypeId" query-param="serviceTypeId"/>
         <with-param name="code" query-param="code"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/services">
      <call-query href="UpdateService">
         <with-param name="description" query-param="description"/>
         <with-param name="updatedBy" query-param="updatedBy"/>
         <with-param name="serviceTypeId" query-param="serviceTypeId"/>
         <with-param name="code" query-param="code"/>
         <with-param name="id" query-param="id"/>
      </call-query>
   </resource>
   <resource method="DELETE" path="/services">
      <call-query href="RemoveService">
         <with-param name="id" query-param="id"/>
      </call-query>
   </resource>
   <resource method="GET" path="/service-types">
      <call-query href="GetServiceTypes"/>
   </resource>
   <resource method="POST" path="/service-types">
      <call-query href="AddServiceType">
         <with-param name="createdBy" query-param="createdBy"/>
         <with-param name="description" query-param="description"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/service-types">
      <call-query href="UpdateServiceType">
         <with-param name="updatedBy" query-param="updatedBy"/>
         <with-param name="description" query-param="description"/>
         <with-param name="id" query-param="id"/>
      </call-query>
   </resource>
   <resource method="DELETE" path="/service-types">
      <call-query href="DeleteServiceType">
         <with-param name="id" query-param="id"/>
      </call-query>
   </resource>
   <resource method="GET" path="/vendors">
      <call-query href="GetVendors"/>
   </resource>
   <resource method="POST" path="/vendors">
      <call-query href="AddVendor">
         <with-param name="name" query-param="name"/>
         <with-param name="createdBy" query-param="createdBy"/>
         <with-param name="assayId" query-param="assayId"/>
         <with-param name="serviceTypeId" query-param="serviceTypeId"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/vendors">
      <call-query href="UpdateVendor">
         <with-param name="name" query-param="name"/>
         <with-param name="updatedBy" query-param="updatedBy"/>
         <with-param name="assayId" query-param="assayId"/>
         <with-param name="serviceTypeId" query-param="serviceTypeId"/>
         <with-param name="id" query-param="id"/>
      </call-query>
   </resource>
   <resource method="DELETE" path="/vendors">
      <call-query href="DeleteVendor">
         <with-param name="id" query-param="id"/>
      </call-query>
   </resource>
   <resource method="GET" path="/request-types">
      <call-query href="GetRequestTypes"/>
   </resource>
   <resource method="POST" path="/request-types">
      <call-query href="AddRequestType">
         <with-param name="description" query-param="description"/>
         <with-param name="createdBy" query-param="createdBy"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/request-types">
      <call-query href="UpdateRequestType">
         <with-param name="description" query-param="description"/>
         <with-param name="updatedBy" query-param="updatedBy"/>
         <with-param name="id" query-param="id"/>
      </call-query>
   </resource>
   <resource method="DELETE" path="/request-types">
      <call-query href="DeleteRequestType">
         <with-param name="id" query-param="id"/>
      </call-query>
   </resource>
</data>
